{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { NavigationEvents } from 'react-navigation';\nimport AuthForm from \"../components/AuthForm\";\nimport NavLink from \"../components/NavLink\";\nimport Api from \"../api/apiInstance\";\nimport * as SecureStore from 'expo-secure-store';\n\nfunction SigninScreen(_ref) {\n  var navigator = _ref.navigator;\n\n  var handleLogin = function handleLogin(email, password) {\n    var body;\n    return _regeneratorRuntime.async(function handleLogin$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"email: \", email);\n            console.log(\"password: \", password);\n            body = {\n              email: email,\n              password: password\n            };\n            Api().post(\"login\", body, {\n              headers: {\n                accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n              }\n            }).then(function (response) {\n              console.log(\"response.data: \", response.data);\n              saveAuthInfo(response.data.accessToken, response.data.refreshToken, response.data.user);\n            }).catch(function (e) {\n              console.log(\"e.response: \", e.response);\n              console.log(\"e.message: \", e.message);\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var saveAuthInfo = function saveAuthInfo(accessToken, refreshToken, user) {\n    return _regeneratorRuntime.async(function saveAuthInfo$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(SecureStore.setItemAsync(\"accessToken\", accessToken));\n\n          case 2:\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(SecureStore.setItemAsync(\"refreshToken\", refreshToken));\n\n          case 4:\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(SecureStore.setItemAsync(\"firstName\", user.firstName));\n\n          case 6:\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(SecureStore.setItemAsync(\"lastName\", user.lastName));\n\n          case 8:\n            _context2.next = 10;\n            return _regeneratorRuntime.awrap(SecureStore.setItemAsync(\"email\", user.email));\n\n          case 10:\n            _context2.t0 = console;\n            _context2.next = 13;\n            return _regeneratorRuntime.awrap(SecureStore.getItemAsync(\"accessToken\"));\n\n          case 13:\n            _context2.t1 = _context2.sent;\n\n            _context2.t0.log.call(_context2.t0, \"await SecureStore.getItemAsync('accessToken'): \", _context2.t1);\n\n            _context2.t2 = console;\n            _context2.next = 18;\n            return _regeneratorRuntime.awrap(SecureStore.getItemAsync(\"refreshToken\"));\n\n          case 18:\n            _context2.t3 = _context2.sent;\n\n            _context2.t2.log.call(_context2.t2, \"await SecureStore.getItemAsync('refreshToken'): \", _context2.t3);\n\n            _context2.t4 = console;\n            _context2.next = 23;\n            return _regeneratorRuntime.awrap(SecureStore.getItemAsync(\"user\"));\n\n          case 23:\n            _context2.t5 = _context2.sent;\n\n            _context2.t4.log.call(_context2.t4, \"await SecureStore.getItemAsync('user'): \", _context2.t5);\n\n          case 25:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(ImageBackground, {\n    source: require(\"../../assets/images/background.png\"),\n    resizeMode: \"cover\",\n    style: styles.container\n  }, React.createElement(AuthForm, {\n    onSubmit: function onSubmit(email, password, firstName, lastName) {\n      return handleLogin(email, password);\n    },\n    submitButtonText: \"Sign In\"\n  }), React.createElement(NavLink, {\n    text: \"Dont have an account? Sign up instead\",\n    routeName: \"Signup\"\n  }), React.createElement(NavLink, {\n    text: \"View Recipe UI For now\",\n    routeName: \"RecipeList\"\n  })));\n}\n\n;\nSigninScreen.navigationOptions = {\n  header: function header() {\n    return false;\n  }\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center'\n  },\n  logoImage: {\n    height: 200,\n    width: 200,\n    alignSelf: 'center',\n    marginTop: 50\n  }\n});\nexport default SigninScreen;","map":{"version":3,"sources":["C:/Users/benwa/Documents/School/Centennial/Semester 6/COMP313/GroceryApp/src/screens/SigninScreen.js"],"names":["React","useContext","NavigationEvents","AuthForm","NavLink","Api","SecureStore","SigninScreen","navigator","handleLogin","email","password","console","log","body","post","headers","accept","then","response","data","saveAuthInfo","accessToken","refreshToken","user","catch","e","message","setItemAsync","firstName","lastName","getItemAsync","styles","container","require","navigationOptions","header","StyleSheet","create","flex","justifyContent","logoImage","height","width","alignSelf","marginTop"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;;;;;;AAEA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,OAAOC,QAAP;AACA,OAAOC,OAAP;AAEA,OAAOC,GAAP;AACA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;;AAEA,SAASC,YAAT,OAAmC;AAAA,MAAZC,SAAY,QAAZA,SAAY;;AAGjC,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAAOC,KAAP,EAAcC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBC,YAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,KAAvB;AACAE,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,QAA1B;AACMG,YAAAA,IAHY,GAGL;AACXJ,cAAAA,KAAK,EAAEA,KADI;AAEXC,cAAAA,QAAQ,EAAEA;AAFC,aAHK;AAQlBN,YAAAA,GAAG,GACFU,IADD,CACM,OADN,EACeD,IADf,EACqB;AACnBE,cAAAA,OAAO,EAAE;AACPC,gBAAAA,MAAM,EAAE,kBADD;AAEP,gCAAgB;AAFT;AADU,aADrB,EAOCC,IAPD,CAOM,UAACC,QAAD,EAAc;AAClBP,cAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BM,QAAQ,CAACC,IAAxC;AACAC,cAAAA,YAAY,CAACF,QAAQ,CAACC,IAAT,CAAcE,WAAf,EAA4BH,QAAQ,CAACC,IAAT,CAAcG,YAA1C,EAAwDJ,QAAQ,CAACC,IAAT,CAAcI,IAAtE,CAAZ;AACD,aAVD,EAWCC,KAXD,CAWO,UAACC,CAAD,EAAO;AACZd,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4Ba,CAAC,CAACP,QAA9B;AACAP,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2Ba,CAAC,CAACC,OAA7B;AACD,aAdD;;AARkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAyBA,MAAMN,YAAY,GAAG,SAAfA,YAAe,CAAOC,WAAP,EAAoBC,YAApB,EAAkCC,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACblB,WAAW,CAACsB,YAAZ,CAAyB,aAAzB,EAAwCN,WAAxC,CADa;;AAAA;AAAA;AAAA,6CAEbhB,WAAW,CAACsB,YAAZ,CAAyB,cAAzB,EAAyCL,YAAzC,CAFa;;AAAA;AAAA;AAAA,6CAGbjB,WAAW,CAACsB,YAAZ,CAAyB,WAAzB,EAAsCJ,IAAI,CAACK,SAA3C,CAHa;;AAAA;AAAA;AAAA,6CAIbvB,WAAW,CAACsB,YAAZ,CAAyB,UAAzB,EAAqCJ,IAAI,CAACM,QAA1C,CAJa;;AAAA;AAAA;AAAA,6CAKbxB,WAAW,CAACsB,YAAZ,CAAyB,OAAzB,EAAkCJ,IAAI,CAACd,KAAvC,CALa;;AAAA;AAAA,2BAMnBE,OANmB;AAAA;AAAA,6CAMkDN,WAAW,CAACyB,YAAZ,CAAyB,aAAzB,CANlD;;AAAA;AAAA;;AAAA,yBAMXlB,GANW,oBAMP,iDANO;;AAAA,2BAOnBD,OAPmB;AAAA;AAAA,6CAOmDN,WAAW,CAACyB,YAAZ,CAAyB,cAAzB,CAPnD;;AAAA;AAAA;;AAAA,yBAOXlB,GAPW,oBAOP,kDAPO;;AAAA,2BAQnBD,OARmB;AAAA;AAAA,6CAQ2CN,WAAW,CAACyB,YAAZ,CAAyB,MAAzB,CAR3C;;AAAA;AAAA;;AAAA,yBAQXlB,GARW,oBAQP,0CARO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAWA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEmB,MAAM,CAACC;AAApB,KAEE,oBAAC,eAAD;AACI,IAAA,MAAM,EAAEC,OAAO,sCADnB;AAEI,IAAA,UAAU,EAAC,OAFf;AAGI,IAAA,KAAK,EAAEF,MAAM,CAACC;AAHlB,KAKA,oBAAC,QAAD;AAGE,IAAA,QAAQ,EAAE,kBAACvB,KAAD,EAAQC,QAAR,EAAkBkB,SAAlB,EAA6BC,QAA7B;AAAA,aAA0CrB,WAAW,CAACC,KAAD,EAAQC,QAAR,CAArD;AAAA,KAHZ;AAIE,IAAA,gBAAgB,EAAC;AAJnB,IALA,EAWA,oBAAC,OAAD;AACE,IAAA,IAAI,EAAC,uCADP;AAEE,IAAA,SAAS,EAAC;AAFZ,IAXA,EAeA,oBAAC,OAAD;AACE,IAAA,IAAI,EAAC,wBADP;AAEE,IAAA,SAAS,EAAC;AAFZ,IAfA,CAFF,CADF;AAyBD;;AAAA;AAEDJ,YAAY,CAAC4B,iBAAb,GAAiC;AAC/BC,EAAAA,MAAM,EAAE;AAAA,WAAM,KAAN;AAAA;AADuB,CAAjC;AAIA,IAAMJ,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BL,EAAAA,SAAS,EAAE;AACTM,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,cAAc,EAAE;AAFP,GADoB;AAM/BC,EAAAA,SAAS,EAAE;AACLC,IAAAA,MAAM,EAAE,GADH;AAELC,IAAAA,KAAK,EAAE,GAFF;AAGLC,IAAAA,SAAS,EAAE,QAHN;AAILC,IAAAA,SAAS,EAAE;AAJN;AANoB,CAAlB,CAAf;AAeA,eAAetC,YAAf","sourcesContent":["import React, { useContext } from 'react';\r\nimport { View, StyleSheet, Text , Image, ImageBackground } from 'react-native';\r\nimport { NavigationEvents } from 'react-navigation';\r\nimport AuthForm from '../components/AuthForm';\r\nimport NavLink from '../components/NavLink';\r\n//import { Context } from '../context/AuthContext';\r\nimport Api from '../api/apiInstance';\r\nimport * as SecureStore from 'expo-secure-store';\r\n\r\nfunction SigninScreen({navigator}) {\r\n  //const { state, signin, clearErrorMessage } = useContext(Context);\r\n  \r\n  const handleLogin = async (email, password) => {\r\n    console.log(\"email: \", email);\r\n    console.log(\"password: \", password);\r\n    const body = {\r\n      email: email,\r\n      password: password\r\n    }\r\n\r\n    Api()\r\n    .post(\"login\", body, {\r\n      headers: {\r\n        accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n    .then((response) => {\r\n      console.log(\"response.data: \", response.data);\r\n      saveAuthInfo(response.data.accessToken, response.data.refreshToken, response.data.user);\r\n    })\r\n    .catch((e) => {\r\n      console.log(\"e.response: \", e.response);\r\n      console.log(\"e.message: \", e.message);\r\n    });\r\n  }\r\n\r\n  const saveAuthInfo = async (accessToken, refreshToken, user) => {\r\n    await SecureStore.setItemAsync(\"accessToken\", accessToken);\r\n    await SecureStore.setItemAsync(\"refreshToken\", refreshToken);\r\n    await SecureStore.setItemAsync(\"firstName\", user.firstName);\r\n    await SecureStore.setItemAsync(\"lastName\", user.lastName);\r\n    await SecureStore.setItemAsync(\"email\", user.email);\r\n    console.log(\"await SecureStore.getItemAsync('accessToken'): \", await SecureStore.getItemAsync(\"accessToken\"))\r\n    console.log(\"await SecureStore.getItemAsync('refreshToken'): \", await SecureStore.getItemAsync(\"refreshToken\"))\r\n    console.log(\"await SecureStore.getItemAsync('user'): \", await SecureStore.getItemAsync(\"user\"))\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {/* <NavigationEvents onWillFocus={clearErrorMessage} /> */}\r\n      <ImageBackground\r\n          source={require('../../assets/images/background.png')}\r\n          resizeMode=\"cover\"\r\n          style={styles.container}\r\n      >\r\n      <AuthForm\r\n        //headerText=\"Sign In to Your Account\"\r\n        // errorMessage={state.errorMessage}\r\n        onSubmit={(email, password, firstName, lastName) => handleLogin(email, password)}\r\n        submitButtonText=\"Sign In\"\r\n      />\r\n      <NavLink\r\n        text=\"Dont have an account? Sign up instead\"\r\n        routeName=\"Signup\"\r\n      />\r\n      <NavLink\r\n        text=\"View Recipe UI For now\"\r\n        routeName=\"RecipeList\"\r\n      />\r\n      </ImageBackground>\r\n    </View>\r\n  );\r\n};\r\n\r\nSigninScreen.navigationOptions = {\r\n  header: () => false,\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    //marginBottom: 250,\r\n  },\r\n  logoImage: {\r\n        height: 200,\r\n        width: 200,\r\n        alignSelf: 'center',\r\n        marginTop: 50,\r\n        //backgroundColor: 'black',\r\n  },\r\n});\r\n\r\nexport default SigninScreen;\r\n"]},"metadata":{},"sourceType":"module"}